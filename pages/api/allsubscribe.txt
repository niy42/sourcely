import type { NextApiRequest, NextApiResponse } from 'next';
import axios from 'axios';
import crypto from 'crypto';
import Subscriber from '@/models/Subscriber';
import { testConnection } from '@/lib/sequelize';

// Mailchimp Config
const API_KEY = process.env.MAILCHIMP_API_KEY!;
const LIST_ID = process.env.MAILCHIMP_LIST_ID!;
const DATACENTER = process.env.MAILCHIMP_DC!;
const REPLY_EMAIL = process.env.REPLY_EMAIL!;

if (!API_KEY || !LIST_ID || !DATACENTER || !REPLY_EMAIL) {
    throw new Error('Missing required environment variables');
}

const getSubscriberHash = (email: string) => {
    return crypto.createHash('md5').update(email.toLowerCase()).digest('hex');
};

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    try {
        const { email, name } = req.body;

        // Validation: Check if email and name are provided
        if (!email || !name) {
            return res.status(400).json({ success: false, message: 'Email and name are required' });
        }

        // Test the database connection
        await testConnection();

        // Check if the email is already subscribed
        const subscriberHash = getSubscriberHash(email);
        const checkUrl = `https://${DATACENTER}.api.mailchimp.com/3.0/lists/${LIST_ID}/members/${subscriberHash}`;

        try {
            await axios.get(checkUrl, {
                headers: {
                    Authorization: `apikey ${API_KEY}`,
                },
            });
            return res.status(409).json({ success: false, message: 'This email is already subscribed' });
        } catch (getError: any) {
            if (getError.response?.status === 404) {
                // Email not found, proceed with subscription
                // Sync database and insert into local MySQL
                await Subscriber.sync();
                await Subscriber.create({ email, name });

                // Mailchimp API request to add subscriber
                const data = {
                    email_address: email,
                    status: 'subscribed',
                    merge_fields: {
                        FNAME: name,
                    },
                    tags: ['new-subscriber'], // Tag the subscriber as a new subscriber
                };
                const subscribeUrl = `https://${DATACENTER}.api.mailchimp.com/3.0/lists/${LIST_ID}/members`;
                const response = await axios.post(subscribeUrl, data, {
                    headers: {
                        Authorization: `apikey ${API_KEY}`,
                        'Content-Type': 'application/json',
                    },
                });

                if (response.status === 200) {
                    // Fetch or create segment ID for new subscribers
                    let segmentId: string | undefined;

                    try {
                        const segmentResponse = await axios.get(`https://${DATACENTER}.api.mailchimp.com/3.0/lists/${LIST_ID}/segments`, {
                            headers: {
                                Authorization: `apikey ${API_KEY}`,
                            },
                        });

                        const segments = segmentResponse.data.segments;
                        segmentId = segments.find((segment: any) => segment.name === 'New Subscribers')?.id;

                        if (!segmentId) {
                            // Create segment if it does not exist
                            const createSegmentData = {
                                name: 'New Subscribers',
                                options: {
                                    match: 'all',
                                },
                                conditions: [
                                    {
                                        condition_type: 'Tag',
                                        field: 'tags',
                                        operator: 'equals',
                                        value: 'new-subscriber',
                                    },
                                ],
                            };

                            const createSegmentResponse = await axios.post(`https://${DATACENTER}.api.mailchimp.com/3.0/lists/${LIST_ID}/segments`, createSegmentData, {
                                headers: {
                                    Authorization: `apikey ${API_KEY}`,
                                    'Content-Type': 'application/json',
                                },
                            });

                            segmentId = createSegmentResponse.data.id;
                        }

                        if (!segmentId) {
                            return res.status(500).json({ success: false, message: 'Segment not found or created' });
                        }

                        // Campaign creation
                        const campaignData = {
                            type: 'regular',
                            recipients: {
                                list_id: LIST_ID,
                                segment_opts: { saved_segment_id: segmentId },
                            },
                            settings: {
                                subject_line: "Welcome to my newsletter!",
                                from_name: "Sourcely",
                                reply_to: REPLY_EMAIL,
                            },
                        };
                        const campaignUrl = `https://${DATACENTER}.api.mailchimp.com/3.0/campaigns`;

                        const createCampaignResponse = await axios.post(campaignUrl, campaignData, {
                            headers: {
                                Authorization: `apikey ${API_KEY}`,
                                'Content-Type': 'application/json',
                            },
                        });

                        const campaignId = createCampaignResponse.data.id;

                        // Set Campaign Content
                        const campaignContent = {
                            html: `<html><body><h1>Welcome, ${name}!</h1><p>Thank you for subscribing to our newsletter.</p></body></html>`,
                        };
                        const contentUrl = `https://${DATACENTER}.api.mailchimp.com/3.0/campaigns/${campaignId}/content`;
                        await axios.put(contentUrl, campaignContent, {
                            headers: {
                                Authorization: `apikey ${API_KEY}`,
                                'Content-Type': 'application/json',
                            },
                        });

                        // Send Campaign
                        const sendUrl = `https://${DATACENTER}.api.mailchimp.com/3.0/campaigns/${campaignId}/actions/send`;
                        await axios.post(sendUrl, {}, {
                            headers: {
                                Authorization: `apikey ${API_KEY}`,
                                'Content-Type': 'application/json',
                            },
                        });

                        return res.status(200).json({ success: true, message: 'Subscription successful and welcome email sent' });
                    } catch (segmentError) {
                        console.error('Error fetching or creating segments:', segmentError);
                        return res.status(500).json({ success: false, message: 'Error fetching or creating segments' });
                    }
                } else {
                    return res.status(response.status).json({ success: false, message: 'Failed to subscribe' });
                }
            } else {
                throw getError;
            }
        }
    } catch (error) {
        console.error('Error:', error);
        return res.status(500).json({ success: false, message: 'Internal Server Error' });
    }
}
